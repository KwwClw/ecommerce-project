"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import ImageSlider from "@/components/ImageSlider";

const Home = () => {
  const [user, setUser] = useState(null);
  const [products, setProducts] = useState([]);
  const [cart, setCart] = useState([]);
  const [loading, setLoading] = useState(true); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
  const [error, setError] = useState(null); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  const URL = process.env.NEXT_PUBLIC_API_URL;
  const [isClient, setIsClient] = useState(false);
  const formatProductName = (name) => {
    return name
      .toLowerCase()  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      .replace(/\s+/g, '-')  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏µ‡∏î
      .replace(/[^\w-]/g, '');  // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  }

  useEffect(() => {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    fetch(`${URL}/api/all-products`)
      .then((res) => res.json())
      .then((data) => {
        setProducts(data);
        setLoading(false);
      })
      .catch((error) => {
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
        setLoading(false);
      });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏à‡∏≤‡∏Å session ‡∏´‡∏£‡∏∑‡∏≠ cookie)
    setIsClient(true);
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const addToCart = (product) => {
    setCart((prevCart) => [...prevCart, product]);
  };

  return (
    <div className="min-h-screen flex flex-col">
      {/* üîπ Header */}
      <header className="w-full p-4 flex justify-between items-center bg-gray-100 shadow-md">
        <h1 className="text-xl font-bold">üõí MyShop</h1>
        {isClient && user ? (
          <span className="text-blue-600 font-semibold">üë§ {user.username}</span>
        ) : (
          <div>
            <Link href="/login">
              <button className="mr-2 px-4 py-1 bg-custom-gray text-white rounded hover:bg-custom-gray-light">
                log in
              </button>
            </Link>
          </div>
        )}
      </header>

      {/* üîπ Product List */}
      <main className="relative p-6 mx-auto max-w-screen-xl flex-1">
        {loading && (
          <p className="absolute inset-0 flex justify-center items-center text-lg whitespace-nowrap">
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...
          </p>
        )}
        {error && (
          <p className="absolute inset-0 flex justify-center items-center text-lg text-red-500 whitespace-nowrap">
            ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          </p>
        )}

        {!loading && !error && products.length > 0 ? (
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-6">
            {products.map((product) => (
              <Link key={product._id} href={`/products/${product._id}`}>
                <div className="w-full p-4 border rounded-lg shadow-md bg-white">
                  <p className="text-sm text-gray-600">100 sold</p>
                  <img
                    src={product.image}
                    alt={formatProductName(product.name)}
                    className="w-full max-h-full object-contain rounded"
                  />
                  <h2 className="mt-2 font-semibold line-clamp-3 min-h-[7rem]">{product.name}</h2>
                  <p className="text-gray-700">
                    ‡∏ø {Number.isInteger(parseFloat(product.price.$numberDecimal))
                      ? parseFloat(product.price.$numberDecimal).toLocaleString("th-TH")  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà .00
                      : parseFloat(product.price.$numberDecimal).toLocaleString("th-TH", { minimumFractionDigits: 2, maximumFractionDigits: 2 })  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° ‡πÉ‡∏™‡πà .00
                    }
                  </p>
                </div>
              </Link>
            ))}
          </div>
        ) : (
          !loading && !error && <p className="text-gray-500 text-center">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
        )}
      </main>
      <ImageSlider />
    </div>
  );
};

export default Home;
