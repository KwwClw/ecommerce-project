// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  // output   = "app/generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  toddler
  preschool
  boy
  girl
  men
  women
  unisex
  kids // เผื่อบางกรณีใช้รวมกัน
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  picture   String?
  role      String   @default("user")
  enabled   Boolean  @default(true)
  address   String?
  orders    Order[]
  carts     Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int              @id @default(autoincrement())
  brand       String
  model       String
  description String @db.Text
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  variants    Variant[]
  orderItems  ProductOnOrder[]
  cartItems   ProductOnCart[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Variant {
  id                  Int           @id @default(autoincrement())
  product             Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           Int
  variant             String
  collaboration       Json?
  colorway            String
  gender              Gender?
  sizes               VariantSize[]
  releaseDate         DateTime? //new
  includedAccessories Json? //new
  islimitedEdition    Boolean       @default(false)
  price               Decimal       @db.Decimal(10, 2)
  sold                Int           @default(0)
  quantity            Int
  images              Image[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model VariantSize {
  id        Int     @id @default(autoincrement())
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId Int
  size      String
  quantity  Int
}

model Order {
  id          Int              @id @default(autoincrement())
  products    ProductOnOrder[]
  cartTotal   Float
  orderStatus String           @default("Not Process")
  orderedBy   User             @relation(fields: [orderedById], references: [id])
  orderedById Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          Int             @id @default(autoincrement())
  products    ProductOnCart[]
  cartTotal   Float
  orderedBy   User            @relation(fields: [orderedById], references: [id])
  orderedById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  Variant    Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
